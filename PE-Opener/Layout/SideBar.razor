@using PEOpener.Infrastuture;
@using PE_Opener.Components;
@using System.Text;
@inject IJSRuntime JSModule;

    <HxTreeView TItem="PeFileTree"
            SelectedItemChanged="OnSelectedItemChanged"
                Items="@treeSystem"
                CssClass="border rounded p-2"
                ItemTitleSelector="@(p => p.Name)"
                ItemIconSelector="@(p => p.Icon)"
                ItemChildrenSelector="@(p => p.SubTree)" />

@code {
    private List<PeFileTree> treeSystem = new List<PeFileTree>();
    public static SideBar _instatace;

    protected override void OnInitialized()
    {
        if (_instatace is null) _instatace = this;
    }

    public async void OnSelectedItemChanged(PeFileTree selectedItem)
    {
        if (selectedItem.Name == HexFile.FileName)
        {
            await JSModule.InvokeVoidAsync("createHexEditor", "hexEditor", HexFile.HexBytes);
            return;
        }
        else if (selectedItem.Name == "Herader")
        {
            ShowData._instance.UpdateData(HexFile.FileHeader());
        }
        else if (selectedItem.Name == "Optional Header")
        {
            ShowData._instance.UpdateData(HexFile.OptionalHeader());
        }
        else if (selectedItem.Name.StartsWith("."))
        {
            var data = HexFile.GetSectionsByName(selectedItem.Name);
            ShowData._instance.UpdateData(data);
            var bytesString = data.Find(x => x.Key == "Bytes");
            var bytes = Encoding.ASCII.GetBytes(bytesString.Value);
            await JSModule.InvokeVoidAsync("createHexEditor", "hexEditor", bytes);

        }
    }


    public void build(List<string> sections)
    {
        treeSystem = new List<PeFileTree>();

        var top = new PeFileTree(HexFile.FileName, BootstrapIcon.Folder);
        treeSystem.Add(top);

        var Herader = new PeFileTree("Herader", BootstrapIcon.Envelope);
        var OptionalHeader = new PeFileTree("Optional Header", BootstrapIcon.Envelope);

        top.SubTree = new List<PeFileTree>();
        top.SubTree.Add(Herader);
        top.SubTree.Add(OptionalHeader);

        if (sections.Count > 0)
        {
            var Section = new PeFileTree("Sections", BootstrapIcon.Envelope);
            Section.SubTree = new List<PeFileTree>();
            foreach (var s in sections)
            {
                Section.SubTree.Add(new PeFileTree(s, BootstrapIcon.Envelope));
            }
            top.SubTree.Add(Section);
        }

        OnSelectedItemChanged(new PeFileTree(HexFile.FileName, BootstrapIcon.Folder));
        StateHasChanged();
    }

    public class PeFileTree
    {
        public PeFileTree(string name, IconBase icon = null, string message = null, ThemeColor? severity = null)
        {
            Name = name;
            Icon = icon;
            Message = message;
            Severity = severity;
        }

        public string Name { get; }

        public IconBase Icon { get; set; }

        public string Message { get; set; }

        public ThemeColor? Severity { get; set; }

        public List<PeFileTree> SubTree { get; set; }
    }

}
